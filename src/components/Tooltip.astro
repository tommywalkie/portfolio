---
type Position = 'top' | 'top-left' | 'top-right' | 'bottom' | 'bottom-left' | 'bottom-right' | 'left' | 'right';

interface Props {
  text: string;
  className?: string;
  position?: Position;
  arrow?: boolean;
}

const { text, className = '', position = 'bottom' } = Astro.props;

const positionClasses: Record<Position, string> = {
  'top': 'bottom-full left-1/2 -translate-x-1/2 mb-1.5',
  'top-left': 'bottom-full left-0 mb-1.5',
  'top-right': 'bottom-full right-0 mb-1.5',
  'bottom': 'top-full left-1/2 -translate-x-1/2 mt-1.5',
  'bottom-left': 'top-full left-0 mt-1.5',
  'bottom-right': 'top-full right-0 mt-1.5',
  'left': 'right-full top-1/2 -translate-y-1/2 mr-1.5',
  'right': 'left-full top-1/2 -translate-y-1/2 ml-1.5'
};
---

<div class={`group relative inline-flex ${className}`}>
  <slot />
  <div class={`invisible opacity-0 group-hover:visible group-hover:opacity-100 transition-all duration-300 absolute ${positionClasses[position]} z-[100]`}>
    <div class="relative bg-primary-700 dark:bg-primary-600 text-white text-sm py-1.5 px-3 rounded whitespace-nowrap shadow-lg">
      {text}
    </div>
  </div>
</div>

<script>
  function setupTooltip(tooltipContainer: HTMLElement) {
    const trigger = tooltipContainer.querySelector('.tooltip-trigger');
    const tooltip = tooltipContainer.querySelector('[role="tooltip"]');

    if (!trigger || !tooltip) return;

    function showTooltip() {
      tooltip.classList.remove('opacity-0', 'pointer-events-none');
    }

    function hideTooltip() {
      tooltip.classList.add('opacity-0', 'pointer-events-none');
    }

    trigger.addEventListener('mouseenter', showTooltip);
    trigger.addEventListener('mouseleave', hideTooltip);
    trigger.addEventListener('focus', showTooltip);
    trigger.addEventListener('blur', hideTooltip);
  }

  document.querySelectorAll('[data-tooltip]').forEach((tooltip) => {
    if (tooltip instanceof HTMLElement) {
      setupTooltip(tooltip);
    }
  });
</script> 